树状数组的求前缀和和修改操作的时间复杂度都是O(logn)

x = 2 ^ ik + 2 ^ i(k-1) + ... + 2 ^ i1
c[x] = a[x - lowbit(x) + 1, x]

 --------------------------------------
 ---------------
 ------          ---------
 ---     ---     ----       -----
 -   -   -   -   -    --    --    --
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16

tr[i]表示以i结尾的长度是lowbit(i)的长度的区间

求前缀和：
x的二进制的形式是 ....1000
先让x-1，得到....0111
c[x]先加上a[x]，就是它本身，再加上a[x - 1]，最后每次加上x减去lowbit(x)得到的x，累加上c[x]，直到x等于0
树状数组求前缀和公式: c[x] = a[x] + a[x - 1] + a[x - 1 - lowbit(x - 1)] + ...
查询： for(i = x; i; i -= lowbit(i)) tr[i] += c

修改某个数：
通过子节点找父节点
比如说x的二进制表示是 ....0111000，那么当修改了x后，需要修改一系列的c的值
通过x找到父节点，方法是 p = x + lowbit(x)，使得x变成....10000，然后修改它，直到最高位，因此最多需要修改的次数是logn
for(i = x; i <= n; i += lowbit(i)) tr[i] += c