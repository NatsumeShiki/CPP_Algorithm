线段树的操作：
1.pushup(u)
2.pushdown
3.build:将一段区间初始化成线段树
  build(int u, int l, int r){
    tr[u].l = l, tr[u].r = r;
    if(l == r) return;
    int mid = l + r >> 1;
    build(u << 1, l, mid), build(u << 1 | 1, mid + 1, r)
    pushup(u);
  }
4.modify:
  单点：easy
  区间：pushdown hard 懒标记
5.query
  (1) [Tl, Tr]包含于[l, r]，直接返回
  (2) [l, r]与[Tl, Tr]的交集不等于空
    [1] Tl|---------------------|Tr
                        l|-----------|r
        Tl <= l <= Tr <= r
        如果l > mid，只递归右边，
        如果l <= mid，递归左边 递归右边
    [2]          Tl|--------------------------|Tr
            l|-----------------|r
      l <= Tl <= r <= Tr
      如果r <= mid，只递归左边
      如果r > mid，递归左边，递归右边
    [3] Tl|------------------------------------|Tr
                  l|------------|r
        Tl <= l <= r <= Tr
        如果r <= mid，只递归左边
        如果l > mid，只递归右边
        其他，递归左边，递归右边






                                       [1, 10]                              --------> 根
                         /                                \                          mid = (l + r) / 2下取整
                      [1, 5]                            [6, 10]                      [l, mid] [mid + 1, r]
               /                 \                /                 \
           [1, 3]              [4, 5]          [6, 8]             [9, 10]
          /     \             /       \       /      \            /     \
        [1, 2]   [3]         [4]      [5]   [6, 7]   [8]         [9]    [10]
        /    \                              /     \
      [1]    [2]                          [6]     [7]

满二叉树 -> 用一维数组存整棵树
编号是x : 父节点: x / 2下取整 或者 x >> 1
          左儿子: 2x 或者 x << 1
          右儿子: 2x + 1 或者 x << 1 | 1
树的倒数第二层有n个节点，那么在他上面有2n - 1个节点，最后一层最多有2n个节点，总和是4n - 1个节点，所以开数组大小是4n

sum：当前区间的总和
add懒标记：给以当前节点为根的子树中的每一个节点加上add（不包含根节点)
pushdown操作伪代码
left.add += root.add; left.sum += (left.r - left.l + 1) * root.add
right.add += root.add; right.sum += (right.r - right.l + 1) * root.add
root.add = 0

使用懒标记可以将区间修改的时间复杂度从4nlogn变成4logn