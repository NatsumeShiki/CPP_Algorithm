// 某个局域网内有 n
//  台计算机和 k
//  条 双向 网线，计算机的编号是 1∼n
// 。由于搭建局域网时工作人员的疏忽，现在局域网内的连接形成了回路，我们知道如果局域网形成回路那么数据将不停的在回路内传输，造成网络卡的现象。

// 注意：

// 对于某一个连接，虽然它是双向的，但我们不将其当做回路。本题中所描述的回路至少要包含两条不同的连接。
// 两台计算机之间最多只会存在一条连接。
// 不存在一条连接，它所连接的两端是同一台计算机。
// 因为连接计算机的网线本身不同，所以有一些连线不是很畅通，我们用 f(i,j)
//  表示 i,j
//  之间连接的畅通程度，f(i,j)
//  值越小表示 i,j
//  之间连接越通畅。

// 现在我们需要解决回路问题，我们将除去一些连线，使得网络中没有回路且不影响连通性（即如果之前某两个点是连通的，去完之后也必须是连通的），并且被除去网线的 Σf(i,j)
//  最大，请求出这个最大值。

// 输入格式
// 第一行两个正整数 n,k
// 。

// 接下来的 k
//  行每行三个正整数 i,j,m
//  表示 i,j
//  两台计算机之间有网线联通，通畅程度为 m
// 。

// 输出格式
// 一个正整数，表示被除去网线的 Σf(i,j)
//  的最大值。

// 数据范围
// 1≤n≤100

// 0≤k≤200

// 1≤f(i,j)≤1000
// 输入样例：
// 5 5
// 1 2 8
// 1 3 1
// 1 5 3
// 2 4 5
// 3 4 2
// 输出样例：
// 8

/*
Kruskal算法
1. 将所有边权从小到大排序
2. 依次枚举每条边a, b, w，如果a和b不连通，那么就将当前边加到最小生成树中
会有多个连通块，所以使用prim算法很麻烦
使用并查集查看a和b是否连通，如果不连通，因为边的长度是从小打大的，所以它一定可以添加进去，如果连通了，那么添加这条边权值更大，连通图连接这个点已经最小了
*/
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;

const int N = 210;
struct edge{ // 边的结构体，两个点和边的权值
    int a, b, w;
    bool operator < (const edge& t){
        return w < t.w;
    }
};
int n, m;
edge edges[N];
int p[N];

int find(int x){
    if(x != p[x]) p[x] = find(p[x]);
    return p[x];
}

int main(){
    cin >> n >> m;
    for(int i = 1; i <= n; i++) p[i] = i; // 父节点设置为自己
    
    for(int i = 0; i < m; i++){
        int a, b, c;
        cin >> a >> b >> c;
        edges[i] = {a, b, c};
    }
    
    sort(edges, edges + m); // 按权值从小到大排序
    
    int res = 0;
    
    for(int i = 0; i < m; i++){
        int a = edges[i].a, b = edges[i].b, w = edges[i].w;
        a = find(a), b = find(b);
        if(a != b) p[a] = b; // 如果不连通，添加到连通块中
        else res += w; // 否则，这条边不需要，题目统计的是去除掉的权重之后，所以累加到res中
    }
    
    cout << res << endl;
    
    return 0;
}