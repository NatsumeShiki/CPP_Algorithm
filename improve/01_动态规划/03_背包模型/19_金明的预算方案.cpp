// 金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专用的很宽敞的房间。

// 更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。

// 今天一早，金明就开始做预算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子：

// QQ截图20190313024710.png

// 如果要买归类为附件的物品，必须先买该附件所属的主件。

// 每个主件可以有0个、1个或2个附件。

// 附件不再有从属于自己的附件。

// 金明想买的东西很多，肯定会超过妈妈限定的N元。

// 于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。

// 他还从因特网上查到了每件物品的价格（都是10元的整数倍）。

// 他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。

// 设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，…，jk
// ，则所求的总和为：

// v[j1]∗w[j1]+v[j2]∗w[j2]+…+v[jk]∗w[jk]
// （其中*为乘号）

// 请你帮助金明设计一个满足要求的购物单。

// 输入格式
// 输入文件的第1行，为两个正整数，用一个空格隔开：N m，其中N表示总钱数，m为希望购买物品的个数。

// 从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数v p q，其中v表示该物品的价格，p表示该物品的重要度（1~5），q表示该物品是主件还是附件。

// 如果q=0，表示该物品为主件，如果q>0，表示该物品为附件，q是所属主件的编号。

// 输出格式
// 输出文件只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（<200000）。

// 数据范围
// N<32000,m<60,v<10000
// 输入样例：
// 1000 5
// 800 2 0
// 400 5 1
// 300 5 1
// 400 3 0
// 500 2 0
// 输出样例：
// 2200

// 用pair<int, int> 存储物品的v和v*w，然后用01背包问题的方法来做
#include <iostream>
#include <cstring>
#include <algorithm>
#include<vector>

#define v first
#define w second // 重要度 * 价格
using namespace std;

typedef pair<int, int> PII;

const int N = 70, M = 32010;
int n, m;
PII master[N]; // 表示主件
vector<PII> servant[N]; // 表示附件
int f[M]; 

int main(){
    cin >> m >> n;
    for(int i = 1; i <= n; i++){
        int v, w, q;
        cin >> v >> w >> q;
        if(!q) master[i] = {v, v * w}; // 如果q是0，表示是主件，存进master中
        else servant[q].push_back({v, v * w}); // 如果q不是0，表示是附件，存进主件的servant数组中
    }
    
    for(int i = 1; i <= n; i++) // 枚举每一个物品
        if(master[i].v){ // 如果该物品的first是0，表示没有主件存进来，进行下一个
            for(int j = m; j >= 0; j--){ // 因为是01背包，并且是一维数组，所以从大到小
                auto &sv = servant[i]; // 用sv来代替servant[i]
                for(int k = 0; k < 1 << sv.size(); k++){ // 用2进制来表示某个附件是否选择，比如果有两个附件，那选择的方式有四种，分别是 00 01 10 11
                    int v = master[i].v, w = master[i].w; // v用01背包意思是体积，w是价格，在这道题里面价格是有限制的
                    for(int u = 0; u < sv.size(); u++) // 遍历二进制的每一位
                        if(k >> u & 1){ // 如果该位上是1，表示购买该附件，v和w都加进去
                            v += sv[u].v;
                            w += sv[u].w;
                        }
                    if(j >= v) f[j] = max(f[j], f[j - v] + w); // 最终如果j >= v，表示钱够，就取较大值
                }
            }
        }
    
    cout << f[m] << endl; // 最终输出f[m]表示不超过金钱m所得到的最大值
    
    return 0;
}