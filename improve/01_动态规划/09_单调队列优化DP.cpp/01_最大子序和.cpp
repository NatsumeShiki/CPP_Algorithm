// 输入一个长度为 n
//  的整数序列，从中找出一段长度不超过 m
//  的连续子序列，使得子序列中所有数的和最大。

// 注意： 子序列的长度至少是 1
// 。

// 输入格式
// 第一行输入两个整数 n,m
// 。

// 第二行输入 n
//  个数，代表长度为 n
//  的整数序列。

// 同一行数之间用空格隔开。

// 输出格式
// 输出一个整数，代表该序列的最大子序和。

// 数据范围
// 1≤n,m≤300000
// 输入样例：
// 6 4
// 1 -3 5 1 -2 3
// 输出样例：
// 7

/*
先预处理出来前缀和
使用单调队列，枚举终点为k，因为长度为m，所以维护一个长度为m的单调递增数组，因此最大值是终点k位置的前缀和减去单调队列最小位置前缀和，也就是s[i] - s[q[hh]]
通过它获取最大值即为答案
*/
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 300010;
int n, m;
int s[N], q[N]; // s是前缀和数组，q是单调队列，保存的是下标

int main(){
    cin >> n >> m;
    for(int i = 1; i <= n; i++){
        cin >> s[i];
        s[i] += s[i - 1];
    }
    
    int res = -1e9; // 答案，保存最大值，所以先把他设置成无穷小
    int hh = 0, tt = 0; // 单调队列的头和尾指针
    for(int i = 1; i <= n; i++){
        if(q[hh] < i - m) hh++; // 如果q[hh] < i - m表示队列头到i位置大于m了，所以要出队列，因此hh++，因为求一段区间的和是s[r] - s[l - 1]，所以是 < i - m
        // i-m位置是长度为m的前一位
        res = max(res, s[i] - s[q[hh]]); // 获取该区间的最大值，与res取较大值 
        while(hh <= tt && s[q[tt]] >= s[i]) tt--; // 查找s[i]在队列中应放的位置，要使得 s[l] <= s[i] <= s[r] 
        q[++tt] = i; // 把s[i]放到单调队列指定的位置
    }
    
    cout << res << endl;
    
    return 0;
}